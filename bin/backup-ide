#!/bin/bash -e
if [[ -n $DEBUG ]]; then set -x; fi

asdf-backup() {
  echo "Saving list of asdf plugins and versions" >&2
  installed="{}"
  for p in $(asdf plugin list); do
    installed=$(jq --arg plugin $p '. + { ($plugin): [] }' <<< $installed)
    for v in $(asdf list $p); do
      installed=$(jq --arg plugin $p --arg version $v '.[$plugin] |= . + [$version]' <<< $installed)
    done
  done
  mkdir -p $HOME/.backup-ide/asdf
  echo $installed > $HOME/.backup-ide/asdf/installed.json
}

asdf-restore() {
  if [[ -e $HOME/.backup-ide/asdf/installed.json ]]; then
    set +e
    installed=$(cat $HOME/.backup-ide/asdf/installed.json)
    echo "Reinstalling asdf plugins and versions" >&2
    for p in $(jq -r 'keys[]' <<< $installed); do
      asdf plugin add $p
      for v in $(jq -r --arg plugin $p '.[$plugin][]' <<< $installed); do
        asdf install $p $v
      done
    done
    set -e
  fi
}

vscode-flavor-backup() {
  codename=${1:-code}
  if [[ -e $HOME/.${codename}-server ]]; then
    commit=$(ls -t $HOME/.${codename}-server/bin/ 2>/dev/null | head -1)
    if [[ -n $commit && -e $HOME/.${codename}-server/bin/${commit}/bin/${codename##vs}-server ]]; then
      echo "Backing up $codename extensions & settings" >&2
      mkdir -p $HOME/.backup-ide/${codename}
      arch=$($HOME/.${codename}-server/bin/${commit}/bin/${codename##vs}-server --version | tail -1)
      jq --arg commit $commit --arg arch $arch '. += {"commit": $commit, "arch": $arch}' < $HOME/.${codename}-server/bin/${commit}/package.json > $HOME/.backup-ide/${codename}/version
      $HOME/.${codename}-server/bin/${commit}/bin/${codename##vs}-server --list-extensions > $HOME/.backup-ide/${codename}/extensions
      if [[ -e $HOME/.${codename}-server/data/Machine/settings.json ]]; then
        cp $HOME/.${codename}-server/data/Machine/settings.json $HOME/.backup-ide/${codename}/
      fi
    fi
  fi
}

vscode-flavor-restore() {
  codename=${1:-code}
  if [[ -e $HOME/.backup-ide/${codename}/version ]]; then
    echo "Restoring $codename extensions & settings" >&2
    version_info=$(cat $HOME/.backup-ide/${codename}/version)
    commit=$(jq -r '.commit' <<< $version_info)
    version=$(jq -r '[.version, .release] | map(select(length > 0)) | join(".")' <<< $version_info)

    case $(uname -i) in
      aarch64 | arm64)
        arch="arm64"
        ;;
      *)
        arch="x64"
        ;;
    esac
    echo "ARCH IS: $arch"

    mkdir -p $HOME/.${codename}-server/bin/${commit}
    if [[ $codename == "codium" ]]; then
      DOWNLOAD_URL=https://github.com/VSCodium/vscodium/releases/download/${version}/vscodium-reh-linux-${arch}-${version}.tar.gz
    else
      DOWNLOAD_URL=https://update.code.visualstudio.com/commit:${commit}/server-linux-${arch}/stable
    fi
    curl -Ls $DOWNLOAD_URL | tar xz --strip-components=1 -C $HOME/.${codename}-server/bin/${commit}

    if [[ -e $HOME/.backup-ide/${codename}/extensions ]]; then
      install_params=""
      for ext in $(cat $HOME/.backup-ide/${codename}/extensions); do
        install_params="$install_params --install-extension $ext"
      done
      $HOME/.${codename}-server/bin/${commit}/bin/${codename##vs}-server $install_params
    fi

    if [[ -e $HOME/.backup-ide/${codename}/settings.json ]]; then
      mkdir -p $HOME/.${codename}-server/data/Machine
      cp  $HOME/.backup-ide/${codename}/settings.json $HOME/.${codename}-server/data/Machine/settings.json
    fi
  fi
}

vscode-backup() {
  vscode-flavor-backup vscode
  vscode-flavor-backup vscodium
  vscode-flavor-backup cursor
}

vscode-restore() {
  vscode-flavor-restore vscode
  vscode-flavor-restore vscodium
  vscode-flavor-restore cursor
}

backup-filename() {
  INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
  TAG_DATA=$(aws ec2 describe-tags --filters Name=resource-id,Values=$INSTANCE_ID)
  OWNER=$(jq -r '.Tags[] | select(.Key == "Owner") | .Value' <<< $TAG_DATA)
  FILE=${1:-${OWNER}}.tar.bz2
  echo $FILE
}

shared-bucket() {
  aws secretsmanager get-secret-value --secret-id "dev-environment/terraform/common" --query "SecretString" --output text \
    | jq -r .shared_bucket_arn | rev | cut -d ':' -f1 | rev
}

links-backup() {
  pushd $HOME
  find . -type l | xargs tar cjf $HOME/.backup-ide/symlinks.tar.bz2 --exclude-from=$HOME/.nul-rdc-devtools/helpers/backup-ignore
  popd
}

links-restore() {
  tar xjf $HOME/.backup-ide/symlinks.tar.bz2 -C $HOME
}

home-backup() {
  SHARED_BUCKET=$(shared-bucket)
  FILE=$(backup-filename $2)
  echo "Creating tarball of $HOME in /tmp/$FILE..." >&2
  set +e
  tar cjf /tmp/$FILE -C $HOME --exclude-tag=.no-backup --exclude-from=$HOME/.nul-rdc-devtools/helpers/backup-ignore .
  exitcode=$?
  if [ $exitcode -gt 1 ]; then exit $exitcode; fi
  set -e
  aws s3 cp /tmp/$FILE s3://$SHARED_BUCKET/homes/$FILE
  rm /tmp/$FILE
}

home-restore() {
  SHARED_BUCKET=$(shared-bucket)
  FILE=$(backup-filename $2)
  if aws s3 ls s3://$SHARED_BUCKET/homes/$FILE > /dev/null; then
    echo "Retrieving and extracting $FILE to $HOME..." >&2
    aws s3 cp s3://$SHARED_BUCKET/homes/$FILE - | tar xj -C $HOME
  else
    echo "s3://$SHARED_BUCKET/homes/$FILE not found. Skipping restore." >&2
  fi
}

package-backup() {
  dnf repoquery --qf '%{name}' --userinstalled > $HOME/.backup-ide/installed_packages.txt
}

package-restore() {
  if [[ -e $HOME/.backup-ide/installed_packages.txt ]]; then
    < $HOME/.backup-ide/installed_packages.txt xargs sudo dnf -y install
  fi
}

display-help() {
  cat <<__EOC__ >&2
This script will back up your home directory to a shared S3 bucket so it can be
restored later during an environment refresh or replacement. In order to minimize
the time and storage required, things like project dependencies and build 
artifacts (e.g., \`deps\`, \`node_modules\`, \`_build\`) are excluded from the backup,
as well as cache files.

Tools installed under ASDF are not backed up, but a record of what plugins and 
versions were installed at the time of the backup is included, and the restore
operation will reinstall them during the restore. The same is true of Visual Code
server, plugins, and settings.

Commands:

    backup [BASENAME]     Initiate a backup, overwriting any existing backup
                          already in place.

    restore [BASENAME]    Initiate a restore, overwriting the existing home
                          directory.
  
    delete [BASENAME]     Delete an existing backup.

    help                  Display this help message.

All operations use s3://$(shared-bucket)/homes/BASENAME.tar.gz as the backup
location. If BASENAME is not provided, the EC2 instance's Owner tag will be used.
__EOC__
  echo
}

COMMAND=$1

should() {
  action=$(tr a-z A-Z <<< $1)
  target=$(tr a-z A-Z <<< $2)
  flag_name=NO_${action}_${target}
  flag=${!flag_name}
  if [[ -z $flag ]]; then
    true
  else
    false
  fi
}

case $COMMAND in
  backup)
    for component in asdf vscode links package home; do
      if should backup $component; then
        ${component}-backup $@
      fi
    done
    ;;
  restore)
    for component in home package vscode links asdf; do
      if should restore $component; then
        ${component}-restore $@
      fi
    done
    ;;
  delete)
    SHARED_BUCKET=$(shared-bucket)
    FILE=$(backup-filename $2)
    aws s3 rm s3://$SHARED_BUCKET/homes/$FILE
    ;;
  help)
    display-help
    ;;
  *)
    echo "Unknown command: $1" >&2
    echo "USAGE: $0 <backup|restore|delete|help> [basename]" >&2
    ;;
esac
