#!/bin/bash -e
if [[ -n $DEBUG ]]; then set -x; fi

source $(dirname $0)/../scripts/with-aws-role.sh

asdf-backup() {
  if asdf > /dev/null 2>&1; then
    echo "Saving list of asdf plugins and versions" >&2
    installed="{}"
    for p in $(asdf plugin list); do
      installed=$(jq --arg plugin $p '. + { ($plugin): [] }' <<< $installed)
      for v in $(asdf list $p); do
        installed=$(jq --arg plugin $p --arg version $v '.[$plugin] |= . + [$version]' <<< $installed)
      done
    done
    mkdir -p $HOME/.backup-ide/asdf
    echo $installed > $HOME/.backup-ide/asdf/installed.json
  fi
}

asdf-restore() {
  if [[ -e $HOME/.backup-ide/asdf/installed.json ]]; then
    set +e
    installed=$(cat $HOME/.backup-ide/asdf/installed.json)
    echo "Reinstalling asdf plugins and versions" >&2
    for p in $(jq -r 'keys[]' <<< $installed); do
      asdf plugin add $p
      for v in $(jq -r --arg plugin $p '.[$plugin][]' <<< $installed); do
        asdf install $p $v
      done
    done
    set -e
  fi
}

mise-backup() {
  if mise activate bash > /dev/null 2>&1; then
    echo "Backing up mise installs" >&2
    mkdir -p $HOME/.backup-ide/mise
    mise ls -i --json > $HOME/.backup-ide/mise/installed.json
  fi
}

mise-restore() {
  if [[ -e $HOME/.backup-ide/mise/installed.json ]]; then
    echo "Restoring mise installs" >&2
    cat $HOME/.backup-ide/mise/installed.json \
      | jq -r '. | to_entries | .[] | .key as $package | .value[] | [$package, .requested_version // .version] | join("@")' \
      | xargs mise install
  fi
}

links-backup() {
  pushd $HOME
  find . -type l | xargs tar cjf $HOME/.backup-ide/symlinks.tar.bz2 --exclude-from=$HOME/.nul-rdc-devtools/helpers/backup-ignore
  popd
}

links-restore() {
  tar xjf $HOME/.backup-ide/symlinks.tar.bz2 -C $HOME
}

restic-command() {
  with-aws-role restic $@
}

home-backup() {
  if ! restic-command cat config > /dev/null 2>&1; then
    echo "Initializing backup repository at $RESTIC_REPOSITORY" >&2
    restic-command init
  fi
  echo "Backing up $HOME to $RESTIC_REPOSITORY" >&2
  restic-command backup --host $DEV_PREFIX --exclude-if-present .no-backup --exclude-file $HOME/.nul-rdc-devtools/helpers/backup-ignore $HOME
  restic-command forget --keep-weekly 3 
}

home-restore() {
  if ! restic-command cat config > /dev/null 2>&1; then
    echo "No backup repository at $RESTIC_REPOSITORY" >&2
    return 1
  fi
  echo "Restoring $HOME from $RESTIC_REPOSITORY/" >&2
  restic-command restore latest --host $DEV_PREFIX --target $HOME
}

package-backup() {
  dnf repoquery --qf '%{name}' --userinstalled > $HOME/.backup-ide/installed_packages.txt
}

package-restore() {
  if [[ -e $HOME/.backup-ide/installed_packages.txt ]]; then
    < $HOME/.backup-ide/installed_packages.txt xargs sudo dnf -y install
  fi
}

display-help() {
  cat <<__EOC__ >&2
This script will back up your home directory to a shared S3 bucket so it can be
restored later during an environment refresh or replacement. In order to minimize
the time and storage required, things like project dependencies and build 
artifacts (e.g., \`deps\`, \`node_modules\`, \`_build\`) are excluded from the backup,
as well as cache files.

Tools installed under ASDF are not backed up, but a record of what plugins and 
versions were installed at the time of the backup is included, and the restore
operation will reinstall them during the restore. The same is true of Visual Code
server, plugins, and settings.

Commands:

    backup [BASENAME]     Initiate a backup, overwriting any existing backup
                          already in place.

    restore [BASENAME]    Initiate a restore, overwriting the existing home
                          directory.
  
    delete [BASENAME]     Delete an existing backup.

    help                  Display this help message.

All operations use s3://$(shared-bucket)/homes/BASENAME.tar.gz as the backup
location. If BASENAME is not provided, the EC2 instance's Owner tag will be used.
__EOC__
  echo
}

COMMAND=$1

should() {
  action=$(tr a-z A-Z <<< $1)
  target=$(tr a-z A-Z <<< $2)
  flag_name=NO_${action}_${target}
  flag=${!flag_name}
  if [[ -z $flag ]]; then
    true
  else
    false
  fi
}

case $COMMAND in
  backup)
    for component in mise asdf links package home; do
      if should backup $component; then
        ${component}-backup $@
      fi
    done
    ;;
  restore)
    for component in home package links asdf mise; do
      if should restore $component; then
        ${component}-restore $@
      fi
    done
    ;;
  delete)
    SHARED_BUCKET=$(shared-bucket)
    FILE=$(backup-filename $2)
    aws s3 rm s3://$SHARED_BUCKET/homes/$FILE
    ;;
  help)
    display-help
    ;;
  *)
    echo "Unknown command: $1" >&2
    echo "USAGE: $0 <backup|restore|delete|help> [basename]" >&2
    ;;
esac
