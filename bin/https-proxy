#!/bin/bash

instance() {
  docker ps -qf "name=https-proxy-$1"
}

create-conf() {
  LOCAL_PORT=$1
  UPSTREAM_DOMAIN=$2
  UPSTREAM_PORT=$3

  cat > /tmp/https-proxy-${LOCAL_PORT}.cfg <<__END__
global
  maxconn             10000
defaults
  timeout client      30s
  timeout server      30s
  timeout connect     30s
frontend HTTPS
  bind                0.0.0.0:443 ssl crt /etc/ssl/certs/cert.pem
  mode                http
  http-request        set-var(txn.proto) str('http') if !{ ssl_fc }
  http-request        set-var(txn.proto) str('https') if { ssl_fc }
  http-request        set-header X-Forwarded-Base %[var(txn.proto)]://%[req.hdr(Host)]/
  http-request        set-header X-Forwarded-Host %[req.hdr(Host)]
  http-request        set-header X-Forwarded-Proto %[var(txn.proto)]
  http-request        set-header X-Forwarded-Port %[src_port]
  http-request        set-header X-Real-IP %[src]
  http-response       set-header Access-Control-Allow-Credentials false
  http-response       set-header Access-Control-Allow-Headers *
  http-response       set-header Access-Control-Allow-Origin *
  default_backend     Upstream
backend Upstream
  mode                http
  server              Backend ${UPSTREAM_DOMAIN}:${UPSTREAM_PORT}
__END__
}

start() {
  cid=$(instance $@)
  if [[ -n "$cid" ]]; then
    echo "https-proxy already running on port $1"
  else
    PORT=$1
    UPSTREAM=$2

    if ! [[ $PORT =~ ^[0-9]+$ && $UPSTREAM =~ ^[0-9]+$ ]]; then
      usage
      return 1
    fi

    create-conf $PORT ${DEV_PREFIX}.dev.rdc.library.northwestern.edu $UPSTREAM
    cat $HOME/.dev_cert/dev.rdc.cert.pem $HOME/.dev_cert/dev.rdc.key.pem > /tmp/https-proxy-${PORT}.pem
    output=$(docker run --name https-proxy-$PORT -d --rm \
      -v /tmp/https-proxy-${PORT}.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro \
      -v /tmp/https-proxy-${PORT}.pem:/etc/ssl/certs/cert.pem:ro \
      -p ${PORT}:443 haproxy:2.4-alpine)
    if [[ $? == 0 ]]; then
      sg open all $1
      echo "Proxying https://${DEV_PREFIX}.dev.rdc.library.northwestern.edu:$1/ to local port $2"
    else
      echo $output
    fi
  fi
}

stop() {
  if ! [[ $1 =~ ^[0-9]+$ ]]; then
    usage
    return 1
  fi

  cid=$(instance $1)
  if [[ -n "$cid" ]]; then
    sg close all $1
    docker container stop $cid > /dev/null
    rm /tmp/https-proxy-$1.cfg /tmp/https-proxy-$1.pem
  else
    echo "proxy not running"
  fi
}

usage() {
  echo "Usage: $(basename $0) <start|stop> HTTPS_PORT [HTTP_PORT]"
  echo "Starts or stops an HTTPS proxy on HTTPS_PORT serving content from HTTP_PORT"
}

COMMAND=$1
shift
case "$COMMAND" in
  start)
    start $@
    ;;
  stop)
    stop $@
    ;;
  *)
    usage
    ;;
esac
